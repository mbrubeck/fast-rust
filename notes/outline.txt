Intro
  What this book is for
  Types of performance
    Speed/latency
    Memory
    Code size

Specific optimizations
  Tuning build options
    Cargo profiles
    rustc options (opt-level, lto, panic=abort, codegen-units)
      target-cpu = native
    jemalloc
  Measurement
    Profilers
      perf
      calltree/kcachegrind
        https://llogiq.github.io/2015/07/15/profiling.html
        https://athemathmo.github.io/2016/09/14/tools-for-profiling-rust.html
      Instruments
        http://carol-nichols.com/2015/12/09/rust-profiling-on-osx-cpu-time/
      Visual Studio
    Instrumentation
      std::time::Instant
    Measuring memory use?
    Measuring code size
      bloaty
      size(1)
    Benchmarks
      stable/unstable
        external benchmarks
          inlining
      black_box
    Theoretical limits
      memory/disk/network bandwidth
  Machine types, memory layout
    fixed-sized versus pointer-sized ints
    f32 versus f64
    struct/enum packing
  Optimizing code size
    opt-level
    lto
  Avoid algorithmic blowup
    Pre-allocating
      behavior of repeated push/append
      use .collect()
  Iterating
    avoiding bounds checks
  Static dispatch
    trait objects
      example: effect of dynamic dispatch on Iterator
  Allocation
    which operations allocate?
    which operations clone data?
      unique versus shared ownership
    ways to avoid allocation
      pre-allocating
        with_capacity(), collect()
      re-using buffers
      borrowing intsead of cloning
        zero-copy
        copy-on-write
        &Trait instead of Box<Trait>
        &T instead of Rc<T> or Arc<T>
  Data structures
    vectors, slices, lists, arrays, deques
      smallvec crate
    maps/sets
      custom hashers
    strings
      UTF-8, indexing, iterating
      str vs. [char] vs. [u8]
      regex crate
  Threads
    channels
    scoped threads
    atomics, locks
    avoiding overhead in single-threaded code
    crates
      parking_lot
      rayon
      crossbeam
  Async I/O

Test cases
  JSON processing
    Parser library
      Benchmarking
      Inlining
      Buffered I/O
      Zero-copy, COW
      Avoid UTF-8 validation
      Streaming versus in-memory
    Tree traversal and computation
      Paralellization
        Multiple files?
